// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebQuanLyBanHang.Data.EF;

#nullable disable

namespace WebQuanLyBanHang.Data.Migrations
{
    [DbContext(typeof(QuanLyBanHangDbContent))]
    [Migration("20230610164013_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("eaa7d4c6-f51e-4e0e-88b4-556f3550afa8"),
                            UserId = new Guid("37dc78be-5899-4092-9f31-7c336837a531")
                        },
                        new
                        {
                            RoleId = new Guid("bc861e4d-6504-4f65-a4cf-e2d3f60d6a1f"),
                            UserId = new Guid("40a76602-1634-4d58-8e74-522d40e7f524")
                        },
                        new
                        {
                            RoleId = new Guid("fd106bef-1b44-44c5-91d5-ca250da233dc"),
                            UserId = new Guid("e48e4bfc-c4e7-4346-a306-8c455d1241e3")
                        },
                        new
                        {
                            RoleId = new Guid("8681b0e2-e6fd-4c8b-8977-de04987f80ba"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.AppointmentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AppointmentSchedules");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ClassifyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ClassifyProducts");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double?>("Age")
                        .HasColumnType("float");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("District")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<int?>("ward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.CustomerManage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SplitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SplitUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffMKTId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerStatusId");

                    b.HasIndex("GroupCustomerId");

                    b.ToTable("CustomerManages");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.CustomerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("CustomerStatuss");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int>("District")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Wards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ExpenseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DeclarePrice")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("IntoMoney")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Payments")
                        .HasColumnType("float");

                    b.Property<double>("Prepay")
                        .HasColumnType("float");

                    b.Property<double>("StillOwed")
                        .HasColumnType("float");

                    b.Property<double>("Surcharge")
                        .HasColumnType("float");

                    b.Property<double>("TransportFee")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ExpenseOrders");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.GroupCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("GroupCustomers");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManageOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOrderActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("ManageOrderss");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementCancellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ManagementCancellations");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MethodDeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderInfoContentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderSourceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SingleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodDeliveryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderInfoContentId");

                    b.HasIndex("OrderSourceId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("SingleTypeId");

                    b.ToTable("ManagementOrders");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementOrderDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DayShipping")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ManagementOrderDates");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.MethodDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("MethodDeliverys");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.OrderInfoContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("OrderInfoContents");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.OrderSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCheck")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("OrderSources");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuss");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClassifyProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<double?>("InitialPrice")
                        .HasColumnType("float");

                    b.Property<double>("InventoryNumber")
                        .HasColumnType("float");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Quanlity")
                        .HasColumnType("float");

                    b.Property<int>("StatusProductId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassifyProductId");

                    b.HasIndex("StatusProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaa7d4c6-f51e-4e0e-88b4-556f3550afa8"),
                            ConcurrencyStamp = "a04dd813-cca5-4f67-b61d-a57296603154",
                            Description = "Quản trị viên",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("bc861e4d-6504-4f65-a4cf-e2d3f60d6a1f"),
                            ConcurrencyStamp = "cb8d8b4e-b4a5-4b4a-81ef-c8d6c885dede",
                            Description = "Nhân viên MKT",
                            Name = "MKT"
                        },
                        new
                        {
                            Id = new Guid("fd106bef-1b44-44c5-91d5-ca250da233dc"),
                            ConcurrencyStamp = "05716dbb-73fa-413a-95c1-78068c9d9890",
                            Description = "Nhân viên Sale",
                            Name = "Sale"
                        },
                        new
                        {
                            Id = new Guid("8681b0e2-e6fd-4c8b-8977-de04987f80ba"),
                            ConcurrencyStamp = "5083e979-a914-4334-a83b-e9f6e0574a34",
                            Description = "Quản lý MKT",
                            Name = "MgMKT"
                        });
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.SingleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SingleTypes");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.StatusProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("StatusProducts");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SupCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avartar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Skype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37dc78be-5899-4092-9f31-7c336837a531"),
                            AccessFailedCount = 0,
                            Address = "Admin",
                            Avartar = "",
                            CityId = 1,
                            ConcurrencyStamp = "2ec08d6a-d16f-4f88-bc1b-10793e88e7c1",
                            DateCreated = new DateTime(2023, 6, 10, 23, 40, 12, 737, DateTimeKind.Local).AddTicks(8002),
                            DateOfBirth = new DateTime(2023, 6, 10, 23, 40, 12, 737, DateTimeKind.Local).AddTicks(8003),
                            Email = "Admin123@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "Admin123@gmail.com",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAzRpiYavvez5YOK2v/JmTY5N/niygqfRNuedoAuYNWM6jttDVdDTpVpvbAqdwu0w==",
                            PhoneNumber = "0369852147",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = false,
                            Skype = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("e48e4bfc-c4e7-4346-a306-8c455d1241e3"),
                            AccessFailedCount = 0,
                            Address = "Sale123",
                            Avartar = "",
                            CityId = 1,
                            ConcurrencyStamp = "2ce83d2c-c524-47b6-8bbf-6e72f990957a",
                            DateCreated = new DateTime(2023, 6, 10, 23, 40, 12, 754, DateTimeKind.Local).AddTicks(5922),
                            DateOfBirth = new DateTime(2023, 6, 10, 23, 40, 12, 754, DateTimeKind.Local).AddTicks(5923),
                            Email = "NhanvienSale@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Bùi Xuân Sale",
                            LockoutEnabled = false,
                            NormalizedEmail = "Sale123@gmail.com",
                            NormalizedUserName = "Sale123",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+qx8KIKCHWioGgOpyXBj987CUxIkvqkvdNwOQf1tRfcHtO+wPj4mzP2HmRFQb1gA==",
                            PhoneNumber = "0369852114",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = false,
                            Skype = "",
                            TwoFactorEnabled = false,
                            UserName = "Sale123"
                        },
                        new
                        {
                            Id = new Guid("40a76602-1634-4d58-8e74-522d40e7f524"),
                            AccessFailedCount = 0,
                            Address = "MKT123",
                            Avartar = "",
                            CityId = 1,
                            ConcurrencyStamp = "8c3816f4-0b7e-4d47-b6dd-5d03883a4dd1",
                            DateCreated = new DateTime(2023, 6, 10, 23, 40, 12, 768, DateTimeKind.Local).AddTicks(3468),
                            DateOfBirth = new DateTime(2023, 6, 10, 23, 40, 12, 768, DateTimeKind.Local).AddTicks(3469),
                            Email = "NhanvienMKT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đặng Xuân MKT",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKT123@gmail.com",
                            NormalizedUserName = "MKT123",
                            PasswordHash = "AQAAAAEAACcQAAAAEE3BcpX6fR+fY3NLYBlCeJJ8h60IUYLnjfpaOuHk9IE4q9e7KoQO5xt84IzKCUN14g==",
                            PhoneNumber = "0369852145",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = false,
                            Skype = "",
                            TwoFactorEnabled = false,
                            UserName = "MKT123"
                        },
                        new
                        {
                            Id = new Guid("8e2027cb-cec4-40d9-9d53-f7e28483d3cb"),
                            AccessFailedCount = 0,
                            Address = "MGMKT123",
                            Avartar = "",
                            CityId = 1,
                            ConcurrencyStamp = "f3530df3-8e3f-4112-a514-1667044a2010",
                            DateCreated = new DateTime(2023, 6, 10, 23, 40, 12, 782, DateTimeKind.Local).AddTicks(1716),
                            DateOfBirth = new DateTime(2023, 6, 10, 23, 40, 12, 782, DateTimeKind.Local).AddTicks(1718),
                            Email = "QuanlynhanvienMKT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Văn Phường",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKT123@gmail.com",
                            NormalizedUserName = "MGMKT123",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0PdHFzveDJZL7j2NigtfB8mXOWGQowTpdyGcY9WeCU6PIMrhXL/di5BqgVz4beVA==",
                            PhoneNumber = "0369852150",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = false,
                            Skype = "",
                            TwoFactorEnabled = false,
                            UserName = "MGMKT123"
                        });
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.AppointmentSchedule", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.CustomerManage", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebQuanLyBanHang.Data.Entity.CustomerStatus", "CustomerStatus")
                        .WithMany()
                        .HasForeignKey("CustomerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.GroupCustomer", "GroupCustomer")
                        .WithMany()
                        .HasForeignKey("GroupCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerStatus");

                    b.Navigation("GroupCustomer");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ExpenseOrder", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManageOrders", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementCancellation", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementOrder", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.MethodDelivery", "MethodDelivery")
                        .WithMany()
                        .HasForeignKey("MethodDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.OrderInfoContent", "OrderInfoContent")
                        .WithMany()
                        .HasForeignKey("OrderInfoContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.OrderSource", "OrderSource")
                        .WithMany()
                        .HasForeignKey("OrderSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.SingleType", "SingleType")
                        .WithMany()
                        .HasForeignKey("SingleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MethodDelivery");

                    b.Navigation("Order");

                    b.Navigation("OrderInfoContent");

                    b.Navigation("OrderSource");

                    b.Navigation("OrderStatus");

                    b.Navigation("SingleType");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ManagementOrderDate", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Order", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.Product", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.ClassifyProduct", "ClassifyProduct")
                        .WithMany()
                        .HasForeignKey("ClassifyProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.StatusProduct", "StatusProduct")
                        .WithMany()
                        .HasForeignKey("StatusProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassifyProduct");

                    b.Navigation("StatusProduct");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebQuanLyBanHang.Data.Entity.ProductOrder", b =>
                {
                    b.HasOne("WebQuanLyBanHang.Data.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebQuanLyBanHang.Data.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
